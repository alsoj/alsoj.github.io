---
title: "[알고리즘]완주하지 못한 선수(코딩테스트 풀이)"
categories:
  - POST
tags:
  - algorithm
  - coding test
  - programmers
---

## 문제설명

전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.
전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.

- 구조대 : 119
- 박준영 : 97 674 223
- 지영석 : 11 9552 4421
  전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.

<br />

## 제한사항

- phone_book의 길이는 1 이상 1,000,000 이하입니다.
  - 각 전화번호의 길이는 1 이상 20 이하입니다.
  - 같은 전화번호가 중복해서 들어있지 않습니다.

<br />

## 입출력 예

| phone_book                      | return |
| ------------------------------- | ------ |
| ["119","97674223","1195524421"] | false  |
| ["123","456","789"]             | true   |
| ["12","123","1235","567","88"]  | false  |

<br />

## 입출력 예 설명

입출력 예 #1
앞에서 설명한 예와 같습니다.

입출력 예 #2
한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.

입출력 예 #3
첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.

<br />

## 풀이1 (Python)

```python
def solution(phoneBook):
    phoneBook = sorted(phoneBook)

    for p1, p2 in zip(phoneBook, phoneBook[1:]):
        if p2.startswith(p1):
            return False
    return True
```

먼저 입력받은 배열을 정렬한다. 이는 한 번호가 다른 번호의 접두어가 된다면, 정렬하였을 때 인접하게 되는 특성을 이용한 것이다. 바로 다음 값이랑만 비교하기 때문에 효율성 측면에서 높은 점수를 받는다.

테스트 케이스들을 정렬하면 아래와 같다.

```python
# 케이스 #1
['119', '1195524421', '97674223']

# 케이스 2
['123', '456', '789']

# 케이스 3
['12', '123', '1235', '567', '88']
```

테스트 케이스에서 확인할 수 있듯이 한 번호가 다른 번호의 접두어로 사용된다면 바로 앞, 뒤 순서로 배치된다. 이어서 파이썬의 내장함수 `zip()`을 사용해 뒷 번호가 앞 번호를 접두어로 사용하는지 확인한다.

> `zip()`함수는 여러 개의 순회 가능한(iterable) 객체를 인자로 받고, 각 객체가 담고 있는 원소를 튜플의 형태로 차례로 접근할 수 있는 반복자(iterator)를 반환한다.

```python
for p1, p2 in zip(phoneBook, phoneBook[1:]):
# p1과 p2는 각각 phoneBook에서 인접하고 있는 앞, 뒤 번호가 담긴다.

    if p2.startswith(p1):
    # p2가 p1으로 시작하면, return False(접두어로 사용된다는 의미)
```

문제의 특성을 잘 파악하고, `zip()`, `startswith()` 등 파이썬에서 기본적으로 제공하는 함수를 잘 활용하여서 깔끔하게 풀이한 답안이다.

<br />

## 풀이2 (Python)

```python
def solution(phone_book):
    answer = True
    hash_map = {}
    for phone_number in phone_book:
        hash_map[phone_number] = 1
    for phone_number in phone_book:
        temp = ""
        for number in phone_number:
            temp += number
            if temp in hash_map and temp != phone_number:
                answer = False
    return answer
```

<br />

## 풀이3 (Java)

```java
class Solution {
    public boolean solution(String[] phoneBook) {
       for(int i=0; i<phoneBook.length-1; i++) {
            for(int j=i+1; j<phoneBook.length; j++) {
                if(phoneBook[i].startsWith(phoneBook[j])) {return false;}
                if(phoneBook[j].startsWith(phoneBook[i])) {return false;}
            }
        }
        return true;
    }
}
```

---

## 출처

[문제링크-프로그래머스:전화번호 목록](https://programmers.co.kr/learn/courses/30/lessons/42577)
