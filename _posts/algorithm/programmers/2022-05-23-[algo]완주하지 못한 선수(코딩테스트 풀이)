---
title: "[알고리즘]완주하지 못한 선수(코딩테스트 풀이)"
categories:
  - POST
tags:
  - algorithm
  - coding test
  - programmers
---

## 문제설명

수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.

마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.

<br />

## 제한사항

- 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.
- completion의 길이는 participant의 길이보다 1 작습니다.
- 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.
- 참가자 중에는 동명이인이 있을 수 있습니다.

<br />

## 입출력 예

| participant                                       | completion                               | return   |
| ------------------------------------------------- | ---------------------------------------- | -------- |
| ["leo", "kiki", "eden"]                           | ["eden", "kiki"]                         | "leo"    |
| ["marina", "josipa", "nikola", "vinko", "filipa"] | ["josipa", "filipa", "marina", "nikola"] | "vinko"  |
| ["mislav", "stanko", "mislav", "ana"]             | ["stanko", "ana", "mislav"]              | "mislav" |

<br />

## 입출력 예 설명

예제 #1  
 "leo"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #2  
"vinko"는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.

예제 #3  
"mislav"는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.

<br />

## 풀이1 (Python)

```python
import collections

def solution(participant, completion):
    answer = collections.Counter(participant) - collections.Counter(completion)
    return list(answer.keys())[0]
```

`collections` 모듈의 `Counter` 클래스를 사용한 풀이방법이다. 코드가 매우 간결한데, 파이썬의 가장 큰 매력이 아닐까 싶다. 이미 구현되어 있는 모듈을 잘 사용하는 것은 매우 중요한 능력이긴 하지만, 알고리즘을 공부하는데 있어서는 특정 모듈을 사용한 풀이 방법 외에도 알아두는 것을 추천한다.

`collections` 모듈의 `Counter` 클래스는 파이썬의 기본 자료구조인 `Dictionary`를 확장하고 있기 때문에, `Dictionary`가 제공하는 API를 그대로 사용할 수 있다. `Counter`를 사용했을 때 결과가 어떻게 나오는지 한 번 살펴보자.

```python
# 예제 3에서 Counter 객체를 출력

print(collections.Counter(participant))
# Counter({'mislav': 2, 'stanko': 1, 'ana': 1})

print(collections.Counter(completion))
# Counter({'stanko': 1, 'ana': 1, 'mislav': 1})

print(collections.Counter(participant) - collections.Counter(completion))
# Counter({'mislav': 1})
```

`Counter`는 말그대로 입력 받은 값의 요소 수를 세는 클래스이다. 위의 예제와 같이 배열을 입력했을 때 각 요소별 수를 셀 수 있고, `Counter` 객체끼리는 빼기도 가능하다. 문제에서 단 한 명의 선수만 완주하지 못했다고 되어있기 때문에 `Counter` 객체끼리 뻈을 때 남는 값이 완주하지 못한 선수이다.

<br />

## 풀이2 (Python)

```python
def solution(participant, completion):
    answer = ''
    temp = 0
    dic = {}
    for part in participant:
        dic[hash(part)] = part
        temp += int(hash(part))
    for com in completion:
        temp -= hash(com)
    answer = dic[temp]

    return answer
```

1번 풀이보다 `Hash` 자료구조를 이해하기에 적합한 풀이다. 1번 풀이에 비해 코드가 복잡해 보이지만, 충분히 간결하며 직관적이다.

<br />

## 풀이3 (Java)

```java
import java.util.HashMap;

class Solution {
    public String solution(String[] participant, String[] completion) {
        String answer = "";
        HashMap<String, Integer> hm = new HashMap<>();
        for (String player : participant) hm.put(player, hm.getOrDefault(player, 0) + 1);
        for (String player : completion) hm.put(player, hm.get(player) - 1);

        for (String key : hm.keySet()) {
            if (hm.get(key) != 0){
                answer = key;
            }
        }
        return answer;
    }
}
```

[문제링크-프로그래머스:완주하지 못한 선수](https://programmers.co.kr/learn/courses/30/lessons/42576)
